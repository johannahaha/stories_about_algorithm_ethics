{
  "id": 5044,
  "name": "New Composed Shader",
  "fragment": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform vec3 color;\nuniform vec3 lightPosition;\nuniform float cStrength;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nconst vec3 cXaxis = vec3(100.0, 0.0, 0.0);\nconst vec3 cYaxis = vec3(0.0, 100.0, 0.0);\nconst vec3 cZaxis = vec3(0.0, 0.0, 100.0);\nvec4 twister(vec4 pos, float t) \n                                {\n                                    float st = sin(t);\n                                    float ct = cos(t);\n                                    vec4 new_pos = vec4(pos);\n                                    new_pos.x = pos.x * ct - pos.z * st;\n                                    new_pos.z = pos.x * st + pos.z * ct;\n                                    new_pos.y = pos.y;\n                                    new_pos.w = pos.w;\n                                    return new_pos;\n                                }\nvec4 Vertex_Distortion1614073243337_79_main() \n                                {\n                                    vec4 Vertex_Distortion1614073243337_79_gl_FragColor = vec4(0.0);\n                                    vec3 worldPosition = (modelMatrix * vec4(vPosition, 1.0)).xyz;\n                                    vec3 worldNormal = normalize(vec3(modelMatrix * vec4(vNormal, 0.0)));\n                                    vec3 lightVector = normalize(lightPosition - worldPosition);\n                                    float brightness = dot(worldNormal, lightVector);\n                                    vec3 position = vPosition;\n                                    float howFarUp = position.y;\n                                    vec3 directionVec = normalize(vec3(position));\n                                    Vertex_Distortion1614073243337_79_gl_FragColor = vec4(directionVec, 1.0);\n                                    return Vertex_Distortion1614073243337_79_gl_FragColor *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_FragColor = Vertex_Distortion1614073243337_79_main();                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float cStrength;\nuniform float angle;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nconst vec3 cXaxis = vec3(1.0, 0.0, 0.0);\nconst vec3 cYaxis = vec3(0.0, 1.0, 0.0);\nconst vec3 cZaxis = vec3(0.0, 0.0, 1.0);\nvec4 twister(vec4 pos, float t) \n                                {\n                                    float st = sin(t);\n                                    float ct = cos(t);\n                                    vec4 new_pos = vec4(pos);\n                                    new_pos.x = pos.x * ct - pos.z * st;\n                                    new_pos.z = pos.x * st + pos.z * ct;\n                                    new_pos.y = pos.y;\n                                    new_pos.w = pos.w;\n                                    return new_pos;\n                                }\nvec4 Vertex_Distortion1614073243337_79_main() \n                                {\n                                    vec4 Vertex_Distortion1614073243337_79_gl_Position = vec4(0.0);\n                                    vNormal = normal;\n                                    vUv = uv;\n                                    vUv2 = uv2;\n                                    vPosition = position;\n                                    float howFarUp = position.y;\n                                    vec3 directionVec = normalize(vec3(position));\n                                    float xangle = dot(cXaxis, directionVec) * 5.0;\n                                    float yangle = dot(cYaxis, directionVec) * 6.0;\n                                    float zangle = dot(cZaxis, directionVec) * 4.5;\n                                    float mTime = time * 1.05;\n                                    float cosx = cos(mTime + xangle);\n                                    float sinx = sin(mTime + xangle);\n                                    float cosy = cos(mTime + yangle);\n                                    float siny = sin(mTime + yangle);\n                                    float cosz = cos(mTime + zangle);\n                                    float sinz = sin(mTime + zangle);\n                                    vec3 timeVec = position;\n                                    timeVec.x += directionVec.x * cosx * siny * cosz * cStrength;\n                                    timeVec.y += directionVec.y * sinx * cosy * sinz * cStrength;\n                                    timeVec.z += directionVec.z * sinx * cosy * cosz * cStrength;\n                                    float twistAngle = angle * howFarUp;\n                                    vec4 twistedPosition = twister(vec4(position, 1.0), twistAngle);\n                                    vec4 twistedNormal = twister(vec4(normal, 1.0), twistAngle);\n                                    vNormal = twistedNormal.xyz;\n                                    Vertex_Distortion1614073243337_79_gl_Position = projectionMatrix * modelViewMatrix * vec4(timeVec + twistedPosition.xyz, 1.0);\n                                    return Vertex_Distortion1614073243337_79_gl_Position *= 1.0;\n                                }\nvoid main() \n                                {\n                                    gl_Position = Vertex_Distortion1614073243337_79_main();                                }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "lightPosition": {
      "value": {
        "x": 0,
        "y": 1.25,
        "z": 1.25
      },
      "type": "v3",
      "glslType": "vec3"
    },
    "angle": {
      "value": "0.7",
      "type": "f",
      "glslType": "float"
    },
    "cStrength": {
      "value": "0.1",
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0,
        "g": 0,
        "b": 0
      },
      "type": "c",
      "glslType": "vec3"
    }
  },
  "url": "http://shaderfrog.com/app/view/5044",
  "user": {
    "username": "jo1232456321",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}